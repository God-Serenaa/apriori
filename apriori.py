# -*- coding: utf-8 -*-
"""apriori.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nfWQTAFDUY6EWjSXJka_e81Usp-qvK2J
"""

from google.colab import drive
drive.mount('/content/drive/')

"""#Main"""

from time import time
from itertools import combinations
from math import ceil

class Apriori:
  def __init__(self, *args, **kwargs):
    self.path = kwargs['path']
    self.total = self.__get_total()
    # self.__mine()


  def __get_total(self):
    with open(self.path, 'r') as f:
      count = 0
      for line in f:
        count += 1
    return count


  def __generate_initial_candidate(self):
    with open(self.path, 'r') as f:
      temp = {}
      for line in f:
        transaction = set(line.split())
        for item in transaction:
          try:
            temp[(item,)] += 1
          except KeyError:
            temp[(item,)] = 1
      return {i:temp[i] for i in sorted(temp)}


  def __find_frequent_patterns(self, candidates):
    temp = {}
    for i in candidates:
      if candidates[i] >= self.threshold:
        temp[i] = candidates[i]
    if not temp:
      return

    self.L.append(temp)

    self.__find_candidates(list(self.L[-1].keys()))


  def __is_joinable(self, key1, key2):
    # if len(key1) == 1:
    #   return True
    if key1[:-1] == key2[:-1]:
      return True
    else:
      return False


  def __check_downward(self, key):
    all = combinations(key, len(key)-1)
    for i in all:
      if i not in self.L[-1]:
        return False

    return True


  def __find_candidates(self, results):
    temp = {}

    for i in range(0, len(results)-1):
      for j in range(i+1, len(results)):

        if self.__is_joinable(results[i], results[j]):
          joined = results[i] + (results[j][-1],)

          if self.__check_downward(joined):
            temp[joined] = self.frequency(joined)
            # print(joined, end=" : ")
            # print(temp[joined])

    if not temp:
      return

    self.C.append(temp)

    self.__find_frequent_patterns(self.C[-1])


  def mine(self, *args, **kwargs):
    self.C = []
    self.L = []
    self.threshold = ceil(self.total*kwargs['threshold'])
    print(f"total transactions {self.total}")
    print(f"threshold {self.threshold}")

    start = time()
    self.C.append(self.__generate_initial_candidate())
    self.__find_frequent_patterns(self.C[-1])
    end = time()

    print()
    print(f"completed in {end-start} secs")


  def frequency(self, pattern):
    with open(self.path, 'r') as f:
      count = 0

      for line in f:
        flag = True

        transaction = set(line.split())
        for i in pattern:
          if i not in transaction:
            flag = False
            break

        if flag == True:
          count += 1
      return count

  def count_frequent_pattern(self):
    print()
    print(f"lengthwise frequent pattern count for threshold {self.threshold}")
    for i in self.L:
      # print(i)
      print(f"length {len(list(i.keys())[0])} : {len(i)}")


  def show_frequent_patterns(self):
    for pattern_list in self.L:
      for pattern in pattern_list:
        print(pattern, end=' : ')
        print(pattern_list[pattern])

"""##chess data"""

chess = Apriori(path='/content/drive/MyDrive/cse477/chess.dat.txt')

chess.mine(threshold=0.9)
chess.count_frequent_pattern()

chess.mine(threshold=0.8)
chess.count_frequent_pattern()

chess.mine(threshold=0.7)
chess.count_frequent_pattern()

chess.mine(threshold=0.6)
chess.count_frequent_pattern()

"""###plot"""

import matplotlib.pyplot as plt

# Threshold percentages
thresholds = [90, 80, 70, 60]

# Data for the first set of values
data_set1 = [12.740272998809814, 166.63649249076843, 1019.1805129051208, 6892.888777971268]

# Data for the second set of values
data_set2 = [1.6963958740234375, 22.06865382194519, 112.72999906539917, 507.0605103969574]

# Create the plot
plt.figure(figsize=(10, 6))

# Plot the first set of data
plt.plot(thresholds, data_set1, marker='o', linestyle='-', color='b', label='Apriori')

# Plot the second set of data on the same graph
plt.plot(thresholds, data_set2, marker='s', linestyle='-', color='r', label='FpGrowth')

plt.xlabel("Threshold")
plt.ylabel("Runtime")
plt.title("Runtime Comparison between Apriori and FpGrowth (Chess Dataset)")
plt.grid(True)
plt.legend()

plt.show()

"""##mushroom"""

mushroom = Apriori(path='/content/drive/MyDrive/cse477/mushroom.dat')

mushroom.mine(threshold=0.9)
mushroom.count_frequent_pattern()

mushroom.mine(threshold=0.8)
mushroom.count_frequent_pattern()

mushroom.mine(threshold=0.7)
mushroom.count_frequent_pattern()

mushroom.mine(threshold=0.6)
mushroom.count_frequent_pattern()

"""###plot"""

import matplotlib.pyplot as plt

# Threshold percentages
thresholds = [90, 80, 70, 60]

# Data for the first set of values
data_set1 = [0.2526240348815918, 0.5689189434051514, 0.7661359310150146, 1.628702163696289]

# Data for the second set of values
data_set2 = [0.05096316337585449, 0.13865876197814941, 0.16063976287841797, 0.29703569412231445]

# Create the plot
plt.figure(figsize=(10, 6))

# Plot the first set of data
plt.plot(thresholds, data_set1, marker='o', linestyle='-', color='b', label='Apriori')

# Plot the second set of data on the same graph
plt.plot(thresholds, data_set2, marker='s', linestyle='-', color='r', label='FpGrowth')

plt.xlabel("Threshold")
plt.ylabel("Runtime")
plt.title("Runtime Comparison between Apriori and FpGrowth (Mushroom Dataset)")
plt.grid(True)
plt.legend()

plt.show()